import numpy as np

def leaky_relu(Function_Input):
    output = [max(0.01*value,value) for value in Function_Input]
    return np.array(output,dtype=float)

class NNPlayer:
    def __init__(self):
        self.Biases=np.array([[-7.670173594836553, 1.527154493734762, 6.317820369456326, 2.1695228188538382, 7.483869526381674, 1.0598028937203805, 1.0410315969817707, 1.529744252432419, 3.341715953055547, 2.812515763308567, 8.627728015821742, -0.4968839764983579, -0.15041354423482622, -5.444793312674996, 1.0897375064983288], [-7.6825148223682245, -1.5675741299000465, -0.1515868773694078, 3.872056630006366, 7.659696924350179, -2.5533624301867452, 5.337113216150675, 10.866917476183602, -7.315290419527297]],dtype=object)

        self.Functions = np.array([leaky_relu,leaky_relu])

        self.Weights=np.array([np.array([[10.5107338516352, -0.43050378558763835, 1.0469257563060106, 9.544995158940417, 12.139343327090327, -1.9678239041939698, 10.245098074957118, -3.130472098982607, 0.39985812296642753, 11.52141470713032, -4.997487340722557, 21.166990881388365, 0.3775499240410285, -2.8910991297573307, 2.249626499899221, 5.679369573268357, -4.002360687857345, 6.980166266813451, 12.438006886949966, -1.2601653094784666, 19.32452728162723, 1.7959336786946345, 11.719059222516224, -5.080740617384347, 6.571993030884848, 2.523112315430099, 8.484458431766535], [-2.7752618297617864, 6.396900706654576, 6.11105753113876, -1.638665460157975, 2.701615723224413, 5.391897775747651, 4.60701313072245, 5.815462207173248, 6.427081543469169, 12.330287145561636, -6.960676024800488, 3.704858392689254, 3.497601135717355, 3.058440468537282, 9.546127814972863, 14.433481537852193, 6.631591365502274, 21.19053958395341, 7.7136770365436576, 4.631625716974005, 0.820758478649706, -2.2624336273372987, 4.189529443547267, 3.0158395190656124, 10.907656027410207, 18.915281777649845, 12.503651096912032], [11.163224964696871, 3.8882143601537535, 7.713285452946496, -0.45901418115614145, -4.152091629015351, 4.319542122260822, 3.112164714326989, 13.63627270817042, -1.896678846307278, 12.242093194067778, 10.778486178424933, 6.129773805476673, 13.310022912942381, 13.232982573545314, 5.8871194134206455, -0.6994539336472578, -4.5484086582187215, -6.327664502707402, 1.3267670740620958, 7.8140264363102725, 6.572718600971212, 9.96694381286927, 5.18526844188072, 4.351744420082239, -2.142287996677947, 11.085519535356212, -0.3911995812392135], [2.333891017669241, -1.0624998870002074, -12.353799901404496, -3.6678567332467553, 17.829793515242866, 11.553615736909277, 5.00782658223496, 17.666215857474832, 11.439059268625769, 1.3680743769567238, -8.195514257620939, 4.3574958309602225, 12.332498869215156, 9.602071943485548, -0.08134110643904369, 8.809608396365045, 10.151250851740407, 5.467367777046945, -2.541237036938676, 1.2621570350211033, 3.636791251490191, 13.23397461056246, 11.161750670304492, 6.038763563709099, 11.469702253096095, 8.727888799910863, -4.6563201610828635], [4.858333470919684, 7.13286251043907, 7.9726153052438296, 3.66722705290605, 5.476487292455822, 7.672594551664879, 7.703130525907508, 10.608612586930334, 11.224467083633986, -1.3062656986415078, 12.025686999409913, 8.255922192026738, 9.749686760066814, 12.621556781946332, 6.864907629570167, 1.6934129614398512, 3.717174623821901, -1.838644631711408, -3.7177726007369887, -2.865491114102194, 12.232676797150983, 2.5779452231433826, 8.507783733211149, 11.185278123250296, 12.26380217474267, 1.7265588977584105, -2.8985327983545774], [17.61609999206769, -4.768675973007004, 7.01142694397578, 8.533638946333815, 2.011841833246388, 3.4808514401074078, 11.24852322723123, 7.417835392536237, 4.263607467011633, 3.0049593730230004, 17.582220705476, 8.114878261889293, 11.828684611705725, 3.085628019304655, 5.205134925718189, 1.5275843862440572, 24.724218086921336, -2.316596399138413, 1.5665713615601655, -0.5455331644924362, 11.979055677120398, -1.0686522523719804, 6.598804093514623, 11.213773104298827, 12.40998914837873, 4.700347885721214, 9.352859761425954], [1.0359568566542938, 7.108285820602189, 9.634163694328896, 0.16563890827807692, -0.14506215785022136, 9.164760432687181, 1.2484860344670738, 14.55755804521567, 2.1672402327385196, 1.7262434318515194, -3.653089572014588, 10.965885769053727, 1.9421244930729298, 4.778237210561144, 6.028358627400443, -2.530581626831269, 3.0215756170068007, -4.627281884106023, 7.916939619259679, -3.8490054270349536, 12.844234500503685, 4.802184487496713, -2.662834903617201, 6.592728913000222, -7.01935083396188, 6.449162424558081, 4.134911424555778], [3.520333571772661, 6.847306587702143, 3.284599785692361, 7.064768019081015, 3.4610376697535994, 3.3780536797300917, -2.050545927602152, 4.927921481943252, 4.325067080077415, 8.787890830097213, 2.1118975224664616, 5.579242651076955, 3.565233523176341, 4.855141767847209, 8.383299958388376, 5.683407907936458, 11.10755392173272, 4.012802501383687, 7.874174071586904, 6.399150733250659, 8.58169414924019, -1.8310570807032587, 1.7973143303400396, 16.00090739910906, 5.885040442308224, 1.5299940251947208, 14.932934582861854], [11.921997674451106, 0.04526719861629247, 4.706443800084257, -2.042574616058948, 7.747543363245646, 4.781586560608559, -0.10429824699635737, -1.4757892104145947, 5.21376173808075, -2.48641070198042, 8.454911664259827, 3.6082245079368285, 3.0502362314675997, -9.994605961721978, 4.090045376197089, 0.6038095472153524, 4.6749223286744535, 12.03506408544351, -2.173628484504186, 6.052995485296293, 9.535183518974812, 6.031288957463349, 9.948526498382504, -0.15394358168704647, 11.799106755264196, 9.452255933449301, 6.132453845726646], [5.919560172602247, 5.139332546725749, 8.581664939701097, 10.242127147321778, 7.929852568842425, 4.579633834034415, 9.324762246390959, 6.920198150134105, 13.903900082310678, 5.496168365336893, -6.096669837970024, 9.65435654668267, 0.5220984503474091, 8.965384398272601, 15.426253757495244, 10.292987196664484, -2.0822831646680022, 11.377402771968864, 2.8217777240168473, 1.3217203235754353, 3.0486792519002393, 0.6690032986223711, 8.566150910432132, -4.925692464767318, 10.30095845499683, 1.6818908513042126, 2.1498658936860897], [5.24976335907603, 2.571430897491968, 7.440240951287086, 8.66546493311078, 6.195415454721145, 4.424178804153746, 8.150777454916962, 4.156541181561887, 6.31122676079026, -1.3810317819829734, -0.8606633992235735, 2.960463790987024, 3.5835793182578284, 5.455225079397506, 9.165795995228272, 2.18223079766173, 9.771934884222729, 4.659966583039823, -2.4675167050619082, 11.160868812780873, -1.0203262392979824, 9.284273671835068, 17.316293422128172, 3.4452532661383524, 6.438932612022308, 19.137205617949192, -4.69680502699013], [11.711541610225323, 2.654181627152081, -3.0673345626947555, 13.035211262916368, 4.613479330589756, 5.57896952900557, 1.4830614900002401, 15.693694851516726, -1.4969406885124987, -1.8866498396539497, -2.165138492170972, 10.479848769846033, -5.539554392041936, 5.350707467437786, 13.603544259862518, 6.1243630058059715, -2.235398936647588, 12.102888883337918, 3.064007087701805, 8.05094677142458, 8.743250404483788, -7.828908003772309, 11.784534903446216, 7.463134960996814, 5.574818691968768, 2.4512528581516646, 15.029830115883628], [13.108631076229697, 13.029337640489883, 7.781187576361328, 6.654057743764734, -5.3379913745937815, 7.8065234812323805, 9.699394310842269, -5.839233712164158, 3.288795016079341, -1.7523231521851343, 2.9221596088261954, 5.937820871057925, 9.221438717316904, 1.0991680039845406, 13.871219049705207, 8.12020138487673, 1.8249240999729741, 1.002567768148306, -0.6293158494532494, 3.530492087009115, -2.277817587386329, 4.185758676661075, -2.618195907545597, 7.304886231001715, -4.336690009781155, 9.736098910470004, 7.225994064926202], [3.1739507878894555, -3.25685684737941, 4.385326145770328, 7.277671753319026, 7.129346149484034, 3.321553707373375, 7.230812302224226, 6.691748909209386, -3.587348544924052, -0.33095373577943366, 18.99679711470199, 5.834492548112208, 1.3486015485927856, 13.353261479177432, 3.497382882243581, 18.325291603298627, 14.059603384742566, 9.354817542865826, 2.5241011059729748, -4.615324830969031, -4.525875541828689, 2.7963705375467223, 14.577495310653788, -0.13846330621207947, 8.600795543311975, 5.990678040871694, 8.151161925650777], [-1.0409091054121618, 6.904709950053631, 13.258675788493644, 9.275106621193391, 8.604380529473945, 8.050732918508174, 5.967139421157406, 6.021173926678445, 10.714944794440191, 9.50044123330689, 2.5221315443501773, 3.0545350364444657, 6.706582252343232, -1.0092650316492682, 8.275563855189048, 0.7323360847502796, 8.494758776698228, 9.2668013104154, 8.128015312136032, 5.550062060486803, 6.009895939706476, 3.05380104341694, 6.87768494780096, 3.668903363102104, 2.859901697889666, 4.721395528002808, 6.683485739488518]]), np.array([[7.730845876553406, -0.24211334210470703, 12.095080729767732, 6.071562960777046, -4.827191106822468, 13.105795751108573, 1.1277278650922873, 7.015855562965979, -0.0928744949453737, 0.17431611687759396, 5.608261162071865, 3.3988956410974165, 6.336485122458893, 10.955084202409534, 9.4754418169519], [-2.7190141014056666, -7.824283919354746, -2.7950871645262905, -0.6070676429589059, 0.44787774251272405, 7.0443772008241305, -0.07729203057849876, -5.0244235229415, 4.380731072984864, 9.87222932956714, 3.2110871708820117, 3.4035382439417177, 10.543535726189244, 1.6677748733232378, 6.040464643750564], [-2.5771971435973846, -5.109998254348046, 0.9694774084042059, 10.781859604840033, 12.42691274152078, -8.725918686789939, 3.9089286747089043, 3.9448024273553495, 3.4136048562667876, 13.580986022043922, 5.328307402431631, -3.301438665943034, 7.484448165880909, 12.64795725433118, 7.425598041228274], [10.920968056945043, 3.8380526889989435, -6.106568292280421, -3.2014602121332736, 0.30365618707195074, -0.1015002943554395, 0.2987280713088756, 9.626223465569511, 12.374251351826892, 3.970134200005366, -2.500917786482904, 4.64991581303145, 1.1870482579962796, 1.6032694257649822, 5.74168209929947], [6.338167056381687, -1.806992791558755, 10.596433542103926, -1.7903032057097648, 13.023968885435643, -8.31783112259388, 8.513968787432809, 0.743150534115339, 0.7088584744817972, 9.032917324132118, 0.7610409331073353, 1.0350657055533214, 5.521604126920508, -0.7156669367464066, 1.140801980882439], [4.592263508505386, -4.7829048898617454, 2.01314207662063, 0.6689318043182222, -3.827932562168996, 7.1548136502501505, -2.1278551499905776, 8.44366118653558, 4.74163156908239, 4.818001024260198, -1.5158193220360023, 2.8473300676740485, 1.966168615681955, 1.826431977101956, 4.255766756715007], [7.943598734643841, 2.786833138461641, 3.480630284445841, 5.940454177701588, 0.08305476852152371, 11.738524736073563, 3.8381996559511222, 10.262392973561841, 1.0716513884448173, 9.509712863841404, 7.163226780184023, 9.692717284215137, 8.447507518713566, -3.648313679153464, -5.843459536751146], [4.756247792330798, -0.7866131542495265, 12.023581312874205, 11.545334237480272, -0.6713410290363704, 14.77288880282362, -5.168550734640005, 0.6954372038606569, 4.117093531753069, 4.448783772848879, 16.62399763366425, -1.7273464359507074, -0.5993940686400947, 7.280273851629033, -1.7019833690821553], [-1.1113782378440622, 11.453140494489196, -1.1883899724145774, -0.030834292776891203, 0.44156584995385373, 9.091375684695338, 0.20634906805025, 4.518782131403238, 6.043606952550677, -0.7185278189276123, 7.224440333928725, 0.6508388338747295, 1.7816114890076116, 10.056424202279056, 12.349449790477664]])],dtype=object)

        self.neuralnet = NeuralNetwork(self.Weights,self.Biases,self.Functions)

    def getSpecs():
        return (27,9) #Current spec 27 inputs repersenting each position on the board. The Value is the difference betweeen the players pips and the enemies at that position

    def SetFitness(self,FitnessScore):
        self.FitnessScore = FitnessScore

    def play(self,myBoard,OpponentBoard,myScore,OpponentScore,turn,GameLength,pips):
        MyNPBoard = np.array(myBoard)
        OpNPBoard = np.array(OpponentBoard)
        NetworkInput = MyNPBoard.ravel() - OpNPBoard.ravel() #This pip difference array is the difference between the players pips and the opponents pips at a given position on the board acts as the input into the neural network
        Result = self.neuralnet.propagate(NetworkInput) #Get result from the neural network this is currently an array of 3 numbers each repersenting a part of a full move
        #Split output innto 3 seperate arrays get index for move based of higheest value in split list 
        Grid = np.argmax(Result[0:2])
        Row = np.argmax(Result[2:5])
        Column = np.argmax(Result[5:8])
        Move = [Grid,Row,Column]
        Move = list(map(int,Move))
        return Move

    def getNN(self):
        return self.neuralnet

class NeuralNetwork:
    def __init__(self,Weights,Biases,Functions):
        WeightsLength = len(Weights)
        BiasesLength = len(Biases)
        FunctionsLength = len(Functions)
        if WeightsLength == BiasesLength == FunctionsLength: #Function for checking lengths of list match
            pass
        else:
            print(Biases)
            raise ValueError("Lists are not off the same length")
        self.Layers = [] #Array of layer objects i.e [InputLayer,HiddenLayers,OutPutLayer]
        ##SOURCE: https://www.geeksforgeeks.org/python-pair-iteration-in-list/
        LayerInfo = zip(Weights,Biases,Functions) #Zip function will create a zip object this will allow us to create tuples pair each iteration of weights biases and functions essentially the information about each layer of the neural network
        LayerInfo = list(LayerInfo) # We need to convert zip from list to iterate over the tuples
        Count = 1
        for weight,bias,function in LayerInfo:
            if Count < len(LayerInfo): #Ensures we dont cause an IndexError
                if weight.shape[0] != LayerInfo[Count][0].shape[1]: #If the number of neurons does not = the number of weights output of the layer can not be used
                    print(weight.shape[0])
                    print(LayerInfo[Count][0].shape[1])
                    raise ValueError("Mismatch Matrix")
            layer = Layer(weight,bias,function)
            self.Layers.append(layer)
            Count+=1

    def getLayers(self):
        return self.Layers

    def propagate(self,NetworkInput):
        LayerInput = NetworkInput
        for layer in self.Layers:
            LayerInput = layer.forward(LayerInput) #We feed the output of an layer back every time until the end of the neural network
        return LayerInput

class Layer:
    def __init__ (self,Weights,Biases,ActivationFunction):
        self.weights = np.copy(Weights) #Copies the Weights and Biases
        self.bias = np.copy(Biases)
        self.function = ActivationFunction
        neurons = self.weights.shape[0] #Gets the number of neurons bassed off the number of columns in matrix
        if len(self.weights) != len(self.bias): #If number of neurons + biases are not = then either a neuron dosent have a bias or vice versa
            raise ValueError("Incorrect Dimensions For Weights and Biases")

    def getMatrix(self):
        return self.weights

    def getBiasVector(self):
        return self.bias

    def getFunction(self):
        return self.function

    def forward(self,InputArray):
        x = np.dot(self.weights, InputArray) + self.bias #Here we can perform a dot product in order to work out the weighted sum + bias for each neuron
        #print(x)
        x = self.function(x)
        return x

if __name__ == "__main__":
    x = NNPlayer()