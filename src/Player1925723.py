import numpy as np

def leaky_relu(Function_Input):
    output = [max(0.01*value,value) for value in Function_Input]
    return np.array(output,dtype=float)

class NNPlayer:
    def __init__(self):
        self.Biases= np.array([[-10.77530565,   6.54931209,   9.71872043, -21.65913287,
        12.37823051,  10.04200942,  27.8484669 ,   3.09284713,
         4.11676808,  12.89751584,  -1.25639274,  16.43576453,
       -25.50899067,   7.13425073,  10.4271805 ],[-13.8200887 ,  13.20871246,  -8.09564749,  -8.35112621,
        19.57118315,  21.59347781,  12.09989276,  19.46031375,
        -7.924602]])
        self.Functions = np.array([leaky_relu,leaky_relu])
        self.Weights = np.array([np.array([[-10.28572812284115, -6.470712759618081, 1.9369854415067898, 30.228234722887354, 5.085111159730812, 2.467190104417493, -8.718063340051696, -1.2522863689490247, 0.058830280448445516, 37.43791116493427, -5.980366711460432, 11.40509816591512, 4.112016040975056, 8.945588517728254, 4.603689347529864, -19.320970085532057, -31.26919523050926, 27.574851748233314, 5.5330830316141615, -3.5576660655630126, 4.8926865635745385, 7.190717184416942, 6.534803241553956, 7.130155271505645, 13.00726543802152, 10.98777059767125, 3.4180570432649406], [-9.367361145969644, -1.9615843196074652, 5.064772815826581, -10.343951022056784, 3.9871590443248808, 18.55310696518045, 9.81097254660317, 3.4360560312103705, 15.189359147290254, 5.584957793045461, -14.948265048450272, 5.028786350674679, 3.558644650161542, 11.42606574945045, -1.2759624648604166, 16.042672818026453, 9.382505093097606, 26.975003010168766, 12.665046835161196, -2.8955458997836323, 3.4092074066815026, -20.793865891788514, -4.246504463635116, -12.744170645015704, 14.522248620545637, 22.46815475533441, 7.567099400721279], [3.063779874145262, 1.845925737368002, -0.5144892157379934, -12.438856103140955, -4.47809063547208, -0.38939100150807726, 3.513670447778737, 22.30269667807127, 22.23647269385793, 10.142626467924321, 5.941724593293554, -3.200041131031058, 12.178501900962681, 9.705899408722534, 19.408974069266034, -5.476178605538944, -13.139592725185016, -4.262464208034968, -8.601847292145324, 16.54303560403323, 7.277250484633022, 5.62396893659338, 7.746607848410577, 15.410623130413924, -0.2915725221178822, -27.91559133402276, 18.741431629810936], [-11.323212741186186, -12.866537610107226, -36.01327379083122, -12.492481890673389, 15.1087998853049, 21.02397463539737, 16.37800741305654, 17.117927778210326, 3.367348687998672, 4.147147434942092, -8.926775559957909, 4.791178057377832, 23.562736815430327, 6.656363889341769, -9.885401986748985, -2.214895054003528, 21.062329468230423, 13.94901022180326, -7.820313459605477, 10.928356924655853, -8.20628419835255, -4.933000562927295, 6.047866182193173, 3.6316921282376047, -7.658201725793557, -0.8121613530474907, -9.718516072483965], [21.651216882705505, 19.195929944312567, 11.770163787692624, 10.056606046160027, 16.740562440461495, 7.911118221822886, 2.4279092914874925, 15.308134256953034, 5.279636555573509, -5.005726638347175, 29.03128274077801, 25.962838487318116, 18.527431794006716, 16.767094325033263, 0.1547153594693793, 7.5503027271159375, -10.770873863078648, -17.122676015601566, -8.849070897889131, 2.776949524561428, 15.338214301146625, -14.150051833555711, 8.054884548288756, 19.207680789860458, 12.395720545745469, -12.007914633653593, -2.60995155603119], [19.643631949275242, -2.817700619167567, 1.9460894167788911, -8.36192499086155, -6.688622985473064, -11.284804836644083, 8.964196586235408, -4.390225275925287, 15.01195844997871, -6.309531038958919, 19.542700904170253, -3.2536370328432183, 8.253257536642181, 17.964180868818413, -2.1287818320832868, -4.9262046293615835, 39.09930002688103, -6.819212338754321, -9.576939789417471, -16.39688318773147, -1.372855383534034, 0.034351946379626686, 13.567221365553522, 8.777632446717828, 17.577920609902826, -6.658607692637961, -1.012416653161223], [-4.294613703946663, 4.129772844546448, 19.259711585426494, -8.011513946152798, -8.860462436281798, 0.5987460648701168, -0.04671683816197181, 13.518792636349286, -3.6467459687343915, 0.9152547755048568, -7.819433845891, 12.080358496952291, -2.1229754076691227, -3.2289913358972857, 3.2625290361990142, 4.075112207302263, 5.819354502010027, -1.8716986554690396, 20.76136213526468, 1.6789441999211314, 26.625058756452287, 12.39216041880281, -17.794884272508558, 3.069570525330219, -7.906026281937579, 24.229320351071443, -0.6678906176333574], [9.46330385448101, -11.139299001549103, -2.505507440397013, 13.068767487055078, 9.806745437426377, 3.9382238984795155, -8.634820376745331, 13.951337633888194, 21.034565338751445, -14.588827506192255, 7.285150121215941, 7.222599366601033, 0.42232938739732284, 19.561013245235355, 19.503423613106108, 15.11270983706467, 31.390729272472665, -2.0858660362846373, 19.39654283697566, -4.573475943737262, 15.189882694163853, -4.1874356552000185, -11.489642824338373, 0.43575346834614637, 20.252955101574894, 18.631516108969176, 22.53907226009901], [9.375087283007336, -8.88655079507276, 15.534327667058205, -19.270288262274462, 19.183776098307963, 12.3920534912038, -1.5471313726312943, 1.9367917041242824, 2.8166276141739877, 9.532097353872633, 4.127093410229567, 7.797518969672576, 14.69252140193218, -22.520683758840683, -3.0602506767524567, -1.9669783005446495, -1.258676162234872, 15.893702032922127, -15.901737104914876, 2.8148098595598436, 1.0292995829400342, 0.06309219558710999, 14.656788502138141, 3.3172669815253206, 17.61710579185178, 20.98825525476454, 10.086425363142936], [13.981708239408574, 22.444588429025636, 6.445448885251201, 5.2567552669912425, 8.872311303713056, 39.04681765197264, 2.3310073574004933, 16.69041036203283, 29.435181291978356, 4.352563170669352, 17.35049843323437, 6.542344530259994, -14.897609338815657, 28.454904461553596, 15.101992959604786, 21.211560536161727, -14.781570126114802, 18.753444582230824, -7.4942050524655235, 5.471020252107435, 12.721049660908864, 4.988177125397664, 15.292643480551163, 0.12308164258064491, 0.3063104246234394, 8.257183377419715, 1.5327410656658327], [24.13709883101876, 13.499929961804842, 6.636739880630065, 3.674598898753274, 9.497925001740064, 5.3881381887170265, 31.731361714735087, 17.9859723154657, 11.18178385114782, -14.405346175750417, 27.13411530740953, -3.0905175217883385, 3.8460620191154344, 5.149689085278109, 24.310463975260074, -4.305093748378759, 0.962308842684332, -1.2100700034988447, -14.819016538955644, 5.631275485715523, 15.439202222926417, 31.04061803286536, -0.17757310280828875, 8.831376987699745, -8.323446825996056, 26.044466181424994, 16.268605804827747], [14.067121207459854, 1.7500022506885795, -2.968473932282296, 28.078913222648303, 4.8751257600964095, 5.140506678776271, 8.184970494575678, 20.622339338718927, 0.5482332080511165, 17.319258709183025, 1.091908735386274, 17.33027370534589, -3.446673856029991, 23.793394809521196, 2.7354633323794824, 3.168441568050257, 6.925360671694066, 13.778351215889925, 3.8299143292227904, 1.986288261949668, 6.559980041794481, 8.525650336997698, 6.40733817620241, 0.609337335284251, 18.83539807809616, 16.90299486529428, 7.355541023530668], [13.23858743954565, 22.06835136295754, 9.33311023419853, 3.7371821687257842, -24.21822647420223, 11.362826263426692, 8.677160288371969, -3.8517475688042584, 7.660701038704612, 4.519475029145661, 18.698537259875522, 0.4434916850166064, 9.548872792974459, 2.7508995519200505, 9.078986474046781, 14.478277630454466, 0.08674980186612546, 18.258347208715566, 3.3038271902109537, -18.121449946140935, -5.044220097660198, 6.581011106661851, 6.122648013945513, -7.131669768465269, 2.5599420995229147, 5.882737179790572, 0.42639462161501007], [-18.911410724962593, 8.493205664305114, -9.54321910490657, -8.116096027298012, 9.448858335729957, 6.977081313701099, 12.402674832112158, 9.836903223745464, 0.34871877033652954, -14.39761352332037, 17.447318889932674, 23.628041099833695, -2.3591437131591153, 9.431364601050763, 18.239868673352703, 25.827557248911777, 6.521024291023758, 12.94927255508378, 18.51100221958093, -5.186100030868236, -3.2419381946164654, 5.260478858326951, 26.437549928357654, -15.3886730127341, 24.17515863451126, 2.099313814216371, 16.047806074514646], [-2.1411596826741732, 22.671826952908297, 12.317423117012543, 5.806017511680089, 9.892352017152888, 10.293966575320933, 14.77911203693623, 5.373063068085676, 6.123471016298606, 17.299734360108065, -12.558994096948371, 6.9382480833258064, 15.853323818304977, -17.832355685517644, -2.5463809297663067, 10.899269741216946, 0.2382160679225851, 10.096627838189223, 20.86519403824199, 3.631092755946158, 15.762605741083194, 3.6908885194227894, 12.803714620694285, 16.836399612729377, 4.2915397172737055, 0.22102762971496226, 1.372002079422706]]),np.array([[6.556787673779754, -6.420254294019505, 13.802029258406305, 18.584636269233332, -8.995427785830437, 13.71497226559584, -15.650637046523196, 33.13558220041836, 3.358841946196007, 1.6919553849700597, 15.530696157174624, -2.2770751121379957, -11.05732533399634, 30.209914328699906, 2.296419637867376], [2.3126273374320867, -21.10424512508485, -0.9324923588940548, 0.032277717289093566, -11.344123728898708, 9.505185241666371, -1.5483423627017365, -16.22917162156197, -3.4876599154184236, -23.29840463983213, -11.132479547554805, 1.89158785310744, 10.529622028583265, 11.79377252105042, 4.143024072378882], [1.9378037051031671, 14.990494772964489, 1.5489740170084552, -1.9194487287810151, 15.209492200408993, -0.5746973493028842, 5.5806248433233, -1.5419835628947873, 1.098904361540724, 10.87283169490876, 5.978836762571172, -6.928654995879385, 10.632752141016649, 28.28317524256554, 2.5830073003600287], [13.943316485861303, -4.535344255986358, -22.650586270843505, -17.64202958054804, -5.896715298298836, -2.7972863076921346, 19.832068101080264, 12.401305844573296, 15.033906400238937, 13.958817501903402, -10.952946965260942, 34.583006263707674, -14.367465848641487, -5.399729862856206, -17.721154868231224], [25.64306133169381, 8.469249154606173, 25.99044526846962, -3.9080107801114448, 2.6362437698911148, 7.833642666661788, 16.591700765081708, 17.09598998845115, -1.7580142014327378, 14.742561022978023, -0.25386356777432906, 0.16362636669460406, -3.7119365947667733, 11.268450224570401, 10.25423003973479], [-4.504640130272221, -12.675944191263463, 2.344788972292386, -3.5991658426080404, 5.096319555953857, -11.529024064000625, -9.59055292671229, -5.071658931149935, 12.017757668037813, 3.128161025616701, 1.5769908391023066, -21.981769786666398, 8.456524402951528, -4.073533906284393, 11.51826758649689], [19.594604858186013, -9.724700171140405, 1.7195279904418583, -0.7065206324483588, 0.3511076637938346, -0.7310244293808388, 21.35550437738753, 2.3488015727763236, 2.535691615289797, -4.152151994612613, 2.0778552954755343, 14.67881730701786, 6.633241000702845, -8.91045620229449, -2.7022194045056676], [6.20213615730347, -6.977168156987677, 9.74502284605025, 6.327695579119036, 2.2423302094337556, 29.028037480944956, -10.832129899785567, -1.5675719078977248, -0.27814695436580017, 22.96760254338355, 16.809648905997463, 9.799558986980616, 1.8120729564581548, 16.83076789873069, -2.420688160088095], [1.794872086899275, 9.51707782535661, 3.856842847061702, -8.205944645431376, -11.673984581187174, 22.031564761363185, 9.763449303395872, -8.3390531352908, -2.838746915604145, -8.813073984125973, -9.79399839716128, -7.1854477367447895, 4.284288706017619, 17.143706159534318, 3.9777376691359567]])])
        print(self.Weights[0])
        self.neuralnet = NeuralNetwork(self.Weights,self.Biases,self.Functions)

    def getSpecs():
        return (27,9) #Current spec 27 inputs repersenting each position on the board. The Value is the difference betweeen the players pips and the enemies at that position

    def SetFitness(self,FitnessScore):
        self.FitnessScore = FitnessScore

    def play(self,myBoard,OpponentBoard,myScore,OpponentScore,turn,GameLength,pips):
        MyNPBoard = np.array(myBoard)
        OpNPBoard = np.array(OpponentBoard)
        NetworkInput = MyNPBoard.ravel() - OpNPBoard.ravel() #This pip difference array is the difference between the players pips and the opponents pips at a given position on the board acts as the input into the neural network
        Result = self.neuralnet.propagate(NetworkInput) #Get result from the neural network this is currently an array of 3 numbers each repersenting a part of a full move
        #Split output innto 3 seperate arrays get index for move based of higheest value in split list 
        Grid = np.argmax(Result[0:2])
        Row = np.argmax(Result[2:5])
        Column = np.argmax(Result[5:8])
        Move = [Grid,Row,Column]
        Move = list(map(int,Move))
        return Move

    def getNN(self):
        return self.neuralnet

class NeuralNetwork:
    def __init__(self,Weights,Biases,Functions):
        self.Weights = Weights
        self.Biases = Biases
        self.Functions = Functions
        WeightsLength = len(Weights)
        BiasesLength = len(Biases)
        FunctionsLength = len(Functions)
        if WeightsLength == BiasesLength == FunctionsLength: #Function for checking lengths of list match
            pass
        else:
            print(Biases)
            raise ValueError("Lists are not off the same length")
        self.Layers = [] #Array of layer objects i.e [InputLayer,HiddenLayers,OutPutLayer]
        ##SOURCE: https://www.geeksforgeeks.org/python-pair-iteration-in-list/
        LayerInfo = zip(Weights,Biases,Functions) #Zip function will create a zip object this will allow us to create tuples pair each iteration of weights biases and functions essentially the information about each layer of the neural network
        LayerInfo = list(LayerInfo) # We need to convert zip from list to iterate over the tuples
        Count = 1
        for weight,bias,function in LayerInfo:
            if Count < len(LayerInfo): #Ensures we dont cause an IndexError
                if weight.shape[0] != LayerInfo[Count][0].shape[1]: #If the number of neurons does not = the number of weights output of the layer can not be used
                    print(weight.shape[0])
                    print(LayerInfo[Count][0].shape[1])
                    raise ValueError("Mismatch Matrix")
            layer = Layer(weight,bias,function)
            self.Layers.append(layer)
            Count+=1

    def getLayers(self):
        return self.Layers

    def propagate(self,NetworkInput):
        LayerInput = NetworkInput
        for layer in self.Layers:
            LayerInput = layer.forward(LayerInput) #We feed the output of an layer back every time until the end of the neural network
        return LayerInput

class Layer:
    def __init__ (self,Weights,Biases,ActivationFunction):
        self.weights = np.copy(Weights) #Copies the Weights and Biases
        self.bias = np.copy(Biases)
        self.function = ActivationFunction
        neurons = self.weights.shape[0] #Gets the number of neurons bassed off the number of columns in matrix
        if len(self.weights) != len(self.bias): #If number of neurons + biases are not = then either a neuron dosent have a bias or vice versa
            raise ValueError("Incorrect Dimensions For Weights and Biases")

    def getMatrix(self):
        return self.weights

    def getBiasVector(self):
        return self.bias

    def getFunction(self):
        return self.function

    def forward(self,InputArray):
        x = np.dot(self.weights, InputArray) + self.bias #Here we can perform a dot product in order to work out the weighted sum + bias for each neuron
        #print(x)
        x = self.function(x)
        return x
